// <auto-generated />
using System;
using CVEGuard.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CVEGuard.Migrations
{
    [DbContext(typeof(CVEGuardDbContext))]
    [Migration("20250219045027_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CVEGuard.Model.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CveId");

                    b.ToTable("Configurations");

                    b.HasAnnotation("Relational:JsonPropertyName", "configurations");
                });

            modelBuilder.Entity("CVEGuard.Model.CpeMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "criteria");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<bool>("Vulnerable")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("Relational:JsonPropertyName", "vulnerable");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("CpeMatches");

                    b.HasAnnotation("Relational:JsonPropertyName", "cpeMatch");
                });

            modelBuilder.Entity("CVEGuard.Model.Cve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CveId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "lastModified");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "published");

                    b.Property<string>("SourceIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "sourceIdentifier");

                    b.Property<string>("VulnStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "vulnStatus");

                    b.HasKey("Id");

                    b.ToTable("Cves");

                    b.HasAnnotation("Relational:JsonPropertyName", "cve");
                });

            modelBuilder.Entity("CVEGuard.Model.CvssData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessComplexity")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "accessComplexity");

                    b.Property<string>("AccessVector")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "accessVector");

                    b.Property<string>("Authentication")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "authentication");

                    b.Property<string>("AvailabilityImpact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "availabilityImpact");

                    b.Property<double>("BaseScore")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "baseScore");

                    b.Property<string>("ConfidentialityImpact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "confidentialityImpact");

                    b.Property<int?>("CvssMetricV2Id")
                        .HasColumnType("int");

                    b.Property<string>("IntegrityImpact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "integrityImpact");

                    b.Property<string>("VectorString")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "vectorString");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("Id");

                    b.HasIndex("CvssMetricV2Id")
                        .IsUnique();

                    b.ToTable("CvssData");

                    b.HasAnnotation("Relational:JsonPropertyName", "cvssData");
                });

            modelBuilder.Entity("CVEGuard.Model.CvssMetricV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MetricsId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("MetricsId");

                    b.ToTable("CvssMetricsV2");

                    b.HasAnnotation("Relational:JsonPropertyName", "cvssMetricV2");
                });

            modelBuilder.Entity("CVEGuard.Model.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CveId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "lang");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("CveId");

                    b.ToTable("Descriptions");

                    b.HasAnnotation("Relational:JsonPropertyName", "descriptions");
                });

            modelBuilder.Entity("CVEGuard.Model.Metrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CveId")
                        .HasColumnType("int");

                    b.Property<int>("CveId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CveId")
                        .IsUnique();

                    b.HasIndex("CveId1");

                    b.ToTable("Metrics");

                    b.HasAnnotation("Relational:JsonPropertyName", "metrics");
                });

            modelBuilder.Entity("CVEGuard.Model.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<bool>("Negate")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("Relational:JsonPropertyName", "negate");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "operator");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("Nodes");

                    b.HasAnnotation("Relational:JsonPropertyName", "nodes");
                });

            modelBuilder.Entity("CVEGuard.Model.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CveId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("CveId");

                    b.ToTable("References");

                    b.HasAnnotation("Relational:JsonPropertyName", "references");
                });

            modelBuilder.Entity("CVEGuard.Model.Vulnerability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CveId")
                        .HasColumnType("int");

                    b.Property<int?>("VulnerabilityResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CveId")
                        .IsUnique();

                    b.HasIndex("VulnerabilityResponseId");

                    b.ToTable("Vulnerabilities");

                    b.HasAnnotation("Relational:JsonPropertyName", "vulnerabilities");
                });

            modelBuilder.Entity("CVEGuard.Model.VulnerabilityResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "format");

                    b.Property<int>("ResultsPerPage")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "resultsPerPage");

                    b.Property<int>("StartIndex")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "startIndex");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.Property<int>("TotalResults")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "totalResults");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("Id");

                    b.ToTable("VulnerabilityResponses");
                });

            modelBuilder.Entity("CVEGuard.Model.Weakness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CveId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("CveId");

                    b.ToTable("Weaknesses");

                    b.HasAnnotation("Relational:JsonPropertyName", "weaknesses");
                });

            modelBuilder.Entity("CVEGuard.Model.Configuration", b =>
                {
                    b.HasOne("CVEGuard.Model.Cve", "Cve")
                        .WithMany("Configurations")
                        .HasForeignKey("CveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cve");
                });

            modelBuilder.Entity("CVEGuard.Model.CpeMatch", b =>
                {
                    b.HasOne("CVEGuard.Model.Node", "Node")
                        .WithMany("CpeMatches")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("CVEGuard.Model.CvssData", b =>
                {
                    b.HasOne("CVEGuard.Model.CvssMetricV2", null)
                        .WithOne("CvssData")
                        .HasForeignKey("CVEGuard.Model.CvssData", "CvssMetricV2Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CVEGuard.Model.CvssMetricV2", b =>
                {
                    b.HasOne("CVEGuard.Model.Metrics", "Metrics")
                        .WithMany("CvssMetricsV2")
                        .HasForeignKey("MetricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("CVEGuard.Model.Description", b =>
                {
                    b.HasOne("CVEGuard.Model.Cve", "Cve")
                        .WithMany("Descriptions")
                        .HasForeignKey("CveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cve");
                });

            modelBuilder.Entity("CVEGuard.Model.Metrics", b =>
                {
                    b.HasOne("CVEGuard.Model.Cve", null)
                        .WithOne("Metrics")
                        .HasForeignKey("CVEGuard.Model.Metrics", "CveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVEGuard.Model.Cve", "Cve")
                        .WithMany()
                        .HasForeignKey("CveId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cve");
                });

            modelBuilder.Entity("CVEGuard.Model.Node", b =>
                {
                    b.HasOne("CVEGuard.Model.Configuration", "Configuration")
                        .WithMany("Nodes")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("CVEGuard.Model.Reference", b =>
                {
                    b.HasOne("CVEGuard.Model.Cve", "Cve")
                        .WithMany("References")
                        .HasForeignKey("CveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cve");
                });

            modelBuilder.Entity("CVEGuard.Model.Vulnerability", b =>
                {
                    b.HasOne("CVEGuard.Model.Cve", "Cve")
                        .WithOne()
                        .HasForeignKey("CVEGuard.Model.Vulnerability", "CveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVEGuard.Model.VulnerabilityResponse", null)
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("VulnerabilityResponseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cve");
                });

            modelBuilder.Entity("CVEGuard.Model.Weakness", b =>
                {
                    b.HasOne("CVEGuard.Model.Cve", "Cve")
                        .WithMany("Weaknesses")
                        .HasForeignKey("CveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cve");
                });

            modelBuilder.Entity("CVEGuard.Model.Configuration", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("CVEGuard.Model.Cve", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Descriptions");

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("References");

                    b.Navigation("Weaknesses");
                });

            modelBuilder.Entity("CVEGuard.Model.CvssMetricV2", b =>
                {
                    b.Navigation("CvssData")
                        .IsRequired();
                });

            modelBuilder.Entity("CVEGuard.Model.Metrics", b =>
                {
                    b.Navigation("CvssMetricsV2");
                });

            modelBuilder.Entity("CVEGuard.Model.Node", b =>
                {
                    b.Navigation("CpeMatches");
                });

            modelBuilder.Entity("CVEGuard.Model.VulnerabilityResponse", b =>
                {
                    b.Navigation("Vulnerabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
